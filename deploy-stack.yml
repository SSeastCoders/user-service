AWSTemplateFormatVersion: "2010-09-09"
Description: "user service stack"
Parameters:
  AppEnv:
    Type: String
    Default: dev
    Description: The environment profile the app will be deployed in
  AppName:
    Type: String
    Default: dev-user-service
    Description: The application name
  ServiceName:
    Type: String
    Description: The service name
  ServicePort:
    Type: Number
    Description: The service port number

Resources:

  # MicroService
  MicroService:
    Type: AWS::ECS::Service
    DependsOn: ApiListener
    Properties:
      ServiceName: !Sub '${AppEnv}-${ServiceName}'
      Cluster: !Sub '{{resolve:secretsmanager:SecretString:ClusterName}}'
      TaskDefinition: !Ref ServiceTask
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Sub '{{resolve:secretsmanager:SecretString:PrivateSubnet}}'

          SecurityGroups:
            - !Sub '{{resolve:secretsmanager:SecretString:SecurityGroup}}'
      LoadBalancers:
        - ContainerName: !Sub '${AppName}-${AppEnv}-${ServiceName}'
          ContainerPort: !Ref ServicePort
          TargetGroupArn: !Ref ServiceTargetGroup


  # Task Definition for the MicroService
  ServiceTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AppEnv}-${AppName}'
      RequiresCompatibilities:
        - FARGATE
      Memory: 2048
      Cpu: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Sub '{{resolve:secretsmanager:SecretString:TaskExecutionRole}}'
      TaskRoleArn: !Sub '{{resolve:secretsmanager:SecretString:ContainerExecutionRole}}'
      ContainerDefinitions:
        - Name: !Sub '${AppEnv}-${ServiceName}'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}:latest'
          PortMappings:
            - ContainerPort: !Ref ServicePort
          Environment:
#            environment variables from secrets manager
            - Name: TWILIO_SID
              Value: '{{resolve:secretsmanager:twilio/sid_token:SecretString:TWILIO_SID}}'
            - Name: TWILIO_TOKEN
              Value: '{{resolve:secretsmanager:twilio/sid_token:SecretString:TWILIO_TOKEN}}'
            - Name: JWT_SECRET
              Value: '{{resolve:secretsmanager:jwt/key:JWT_SECRET}}'
            - Name: DB_USER
              Value: '{{resolve:secretsmanager:rds/eastcoders-db/login:SecretString:username}}'
            - Name: DB_PASS
              Value: '{{resolve:secretsmanager:rds/eastcoders-db/login:SecretString:password}}'
          Essential: true
          Memory: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${AppName}/${AppEnv}/${ServiceName}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${ServiceName}-${AppEnv}
              awslogs-create-group: 'true'

  # The TargetGroup for the MicroService
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref ServicePort
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: '/health'
      HealthCheckTimeoutSeconds: 5
      HealthCheckPort: !Ref ServicePort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      TargetType: ip
      VpcId: !Sub '{{resolve:secretsmanager:SecretString:VpcId}}'

  # API Listener
  ApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Sub '{{resolve:secretsmanager:SecretString:LoadBalancer}}'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServiceTargetGroup
      Port: !Ref ServicePort
      Protocol: HTTP

  DevJenkins:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref DevJenkinsProfileIAM
      ImageId: ami-035827670e92602bf
      InstanceType: t2.large
      KeyName: awsKeyAmanda
      SecurityGroupIds: !Ref JenkinsSonarSecurityGroup
      UserData: >-
        IyEvYmluL2Jhc2gKc3VkbyB5dW0gdXBkYXRlIC15CnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGplbmtpbnMKc3VkbyBzeXNjdGwgLXcgdm0ubWF4X21hcF9jb3VudD01MjQyODgKc3VkbyBzeXNjdGwgLXcgZnMuZmlsZS1tYXg9MTMxMDcyCnN1ZG8gdWxpbWl0IC11IDgxOTIKc3VkbyBzZXJ2aWNlIGRvY2tlciBzdGFydApzdWRvIGRvY2tlci1jb21wb3NlIHVwIC1k

  JenkinsSonarSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'allows connection to Jenkins and Sonarqube'
      GroupName: 'JenkinsSonarSecurityGroup'
      SecurityGroupEgress:
        - IpProtocol: tcp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: jtdo
          Value: true
      VpcId: !Sub '{{resolve:secretsmanager:SecretString:VpcId}}'