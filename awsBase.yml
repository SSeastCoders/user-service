AWSTemplateFormatVersion: 2010-09-09
Resources:
  DevPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref DevVpc
      Tags:
        - Key: jtdo
          Value: true

  DevPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref DevVpc
      Tags:
        - Key: jtdo
          Value: true

  DevVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
    Metadata:

  DevPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref DevVpc
      Tags:
        - Key: jtdo
          Value: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: be5f2f88-1b04-4728-a192-a82893d50a3f
  DevPrivateSubnetRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: DevPrivateRouteTable
      SubnetId:
        Ref: DevPrivateSubnet
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5d7457c8-5782-4f0a-93e5-00d4f9bf0cd0
  DevPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref DevVpc

  DevPublicSubnetRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: DevPublicRouteTable
      SubnetId:
        Ref: DevPublicSubnet
  DevInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: jtdo
          Value: true

  DevVPCGatewayAttachement:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: DevInternetGateway
      VpcId:
        Ref: DevVpc

  DevPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref DevPublicRouteTable
      GatewayId: !Ref DevInternetGateway

  DevNatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref DevPublicSubnet
      ConnectivityType: private
      Tags:
        - Key: jtdo
          Value: true

  DevPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref DevPrivateRouteTable
      NatGatewayId: !Ref DevNatGateway
      DestinationCidrBlock: 0.0.0.0/0

  DevSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Routing protocols for subnets
      GroupName: DevSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      VpcId: !Ref DevVpc
      Tags:
        - Key: jtdo
          Value: true

  DevUserTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /users/health
      HealthCheckPort: 8222
      HealthCheckProtocol: HTTP
      Name: DevUserTargetGroup
      Port: 8222
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags:
        - Key: jtdo
          Value: true
      TargetType: ip
      VpcId: !Ref DevVpc

  DevAccountTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /api/v1/accounts/health
      HealthCheckPort: 8223
      HealthCheckProtocol: HTTP
      Name: DevAccountTargetGroup
      Port: 8223
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags:
        - Key: jtdo
          Value: true
      TargetType: ip
      VpcId: !Ref DevVpc

  DevTransactionTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /api/v1/transactions/health
      HealthCheckPort: 8224
      HealthCheckProtocol: HTTP
      Name: DevTransactionTargetGroup
      Port: 8224
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags:
        - Key: jtdo
          Value: true
      TargetType: ip
      VpcId: !Ref DevVpc

  DevApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: DevApplicationLoadBalancer
      SecurityGroups:
        - !Ref DevSecurityGroup
      SubnetMappings:
        - SubnetId: !Ref DevPublicSubnet2
        - SubnetId: !Ref DevPublicSubnet
      Tags:
        - Key: jtdo
          Value: true
      Type: application

  DevPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref DevVpc
      Tags:
        - Key: jtdo
          Value: true

  DevListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref DevUserTargetGroup
      LoadBalancerArn: !Ref DevApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  DevUserListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DevUserTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /users/*
      ListenerArn: !Ref DevListener
      Priority: 1

  DevAccountListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cbe04fe5-cf2c-4917-bf79-83bb051cf3dc
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DevAccountTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/v1/accounts/*
      ListenerArn: !Ref DevListener
      Priority: 2
  DevTransactionListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f7e6c072-a46e-4371-bf9b-5b87e20d46ec
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DevTransactionTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/v1/transactions/*
      ListenerArn: !Ref DevListener
      Priority: 3
  DevCardTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /cards/health
      HealthCheckPort: 8225
      HealthCheckProtocol: HTTP
      Name: DevCardTargetGroup
      Port: 8225
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags:
        - Key: jtdo
          Value: true
      TargetType: ip
      VpcId: !Ref DevVpc

  DevCardListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DevCardTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /credit-cards/*
      ListenerArn: !Ref DevListener
      Priority: 4

  DevAccountRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryName: dev-account
      Tags:
        - Key: jtdo
          Value: true

  DevUserRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryName: dev-user
      Tags:
        - Key: jtdo
          Value: true

  DevTransactionRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryName: dev-transaction
      Tags:
        - Key: jtdo
          Value: true

  DevCardRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryName: dev-card
      Tags:
        - Key: jtdo
          Value: true

  DevCluster:
    Type: 'AWS::ECS::Cluster'

    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: DevEastcoderCluster
      Tags:
        - Key: jtdo
          Value: true
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite

  DevOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Origin Access Identity for portals

  DevUserPortalBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9798340e-dfef-4b40-803f-116cf52b3447
    Properties:
      Bucket: !Ref DevUserPortalBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DevUserPortalBucket}/*'
            Principal: '*'
          - Action: 's3:*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DevUserPortalBucket}/*'
            Principal:
              CanonicalUser: !GetAtt DevOriginAccessIdentity.S3CanonicalUserId
  DevUserPortalBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Authorization
              - id
            Id: DevCorsRule
            MaxAge: 3600
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: user-portal-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: jtdo
          Value: true
      VersioningConfiguration:
        Status: Enabled

  DevAdminPortalBucket:
    Type: 'AWS::S3::Bucket'

    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Authorization
              - id
            Id: DevCorsRule
            MaxAge: 3600
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: admin-portal-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: jtdo
          Value: true
      VersioningConfiguration:
        Status: Enabled
  DevAdminPortalBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'

    Properties:
      Bucket: !Ref DevAdminPortalBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DevAdminPortalBucket}/*'
            Principal: '*'
          - Action: 's3:*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DevAdminPortalBucket}/*'
            Principal:
              CanonicalUser: !GetAtt DevOriginAccessIdentity.S3CanonicalUserId
  DevEC2FullAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Access to the Jenkins ec2 to publish to ecr
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:*'
                  - 'cloudtrail:LookupEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                Resource: '*'
          PolicyName: AmazonEC2ContainerRegistryFullAccess
      Tags:
        - Key: jtdo
          Value: true

  DevJenkinsProfileIAM:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: JenkinsIAMProfile
      Path: /
      Roles:
        - !Ref DevEC2FullAccessRole

  DevJenkins:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref DevJenkinsProfileIAM
      ImageId: ami-035827670e92602bf
      InstanceType: t2.large
      KeyName: awsKeyAmanda
      SecurityGroupIds: !Ref JenkinsSonarSecurityGroup
      UserData: >-
        IyEvYmluL2Jhc2gKc3VkbyB5dW0gdXBkYXRlIC15CnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGplbmtpbnMKc3VkbyBzeXNjdGwgLXcgdm0ubWF4X21hcF9jb3VudD01MjQyODgKc3VkbyBzeXNjdGwgLXcgZnMuZmlsZS1tYXg9MTMxMDcyCnN1ZG8gdWxpbWl0IC11IDgxOTIKc3VkbyBzZXJ2aWNlIGRvY2tlciBzdGFydApzdWRvIGRvY2tlci1jb21wb3NlIHVwIC1k

  JenkinsSonarSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'allows connection to Jenkins and Sonarqube'
      GroupName: 'JenkinsSonarSecurityGroup'
      SecurityGroupEgress:
        - IpProtocol: tcp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: jtdo
          Value: true
      VpcId: !Ref DevVpc
#Metadata:
#  'AWS::CloudFormation::Designer':
#    id: 49238cb2-8c82-4b68-adda-637414365a11